{"version":3,"sources":["svg/Items lazy /^/item0.*/.svg$/ groupOptions: {} namespace object","reportWebVitals.js","theme.js","global/providers.comp.js","parts/base.comp.js","hooks/use-current-user.hook.js","svg/logo-kv.svg","global/constants.js","util/fetcher.js","hooks/use-market-items.hook.js","util/normalize-item.js","flow/script.get-account-items.js","hooks/use-account-items.hook.js","flow/script.is-account-initialized.js","flow/util/tx.js","flow/tx.initialize-account.js","util/sleep.js","flow/script.get-fusd-balance.js","hooks/use-fusd-balance.hook.js","hooks/use-initialized.hook.js","parts/auth-cluster.comp.js","parts/init-cluster.comp.js","flow/script.get-flow-balance.js","hooks/use-flow-balance.hook.js","util/fmt-fusd.js","parts/balance-cluster.comp.js","hooks/use-config.hook.js","flow/script.get-market-item.js","flow/tx.buy-market-item.js","flow/tx.remove-sale-offer.js","hooks/use-market-item.hook.js","flow/util/batch.js","flow/script.get-account-item.js","flow/tx.create-sale-offer.js","hooks/use-account-item.hook.js","parts/account-item-cluster.comp.js","parts/market-item-cluster.comp.js","parts/market-items-cluster.comp.js","parts/account-items-cluster.comp.js","svg/cookie.svg","svg/backpack.svg","pages/account/index.js","global/config.js","index.js","hooks/use-url-address.hook.js","pages/root.page.js","pages/not-found.page.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","theme","extendTheme","fonts","body","heading","colors","Providers","children","StrictMode","Base","currentUser","atom","key","default","addr","loggedIn","cid","tools","logIn","fcl","logOut","signUp","changeUser","useCurrentUser","useRecoilState","user","setUser","useEffect","subscribe","LOADING","IDLE","PROCESSING","fetcher","url","fetch","res","json","$marketItemsState","$marketItemsStatus","useMarketItems","status","setStatus","items","setItems","useSWR","process","initialData","refreshInterval","onLoadingSlow","onSuccess","latestSaleOffers","item","assign","itemID","sale_item_id","resourceID","sale_item_resource_id","typeID","sale_item_type","owner","sale_item_owner","price","sale_price","txID","transaction_id","normalizeItem","onError","error","console","log","asMap","Map","has","findSaleOffer","itemId","get","CODE","fetchAccountItems","address","Address","d","sort","a","b","$state","atomFamily","selectorFamily","$status","useAccountItems","mint","method","headers","JSON","stringify","recipient","Math","floor","random","refresh","cdc","isAccountInitialized","send","script","args","arg","decode","noop","tx","mods","opts","onStart","onSubmission","onUpdate","onComplete","txId","fvsTx","info","unsub","onceSealed","txStatus","env","initializeAccount","invariant","transaction","limit","proposer","authz","payer","authorizations","sleep","ms","setTimeout","fetchFUSDBalance","valueAtom","statusAtom","useFUSDBalance","balance","setBalance","amount","$init","$computedInit","all","FUSD","KittyItems","KittyItemsMarket","useInitialized","init","setInit","isInitialized","useRecoilValue","fusd","recheck","initialize","AuthCluster","mb","src","Logo","size","as","A","mr","to","colorScheme","onClick","p","WrappedAuthCluster","fallback","fmtBool","bool","Check","color","Close","InitCluster","cu","maxW","borderWidth","borderRadius","mt","disabled","WrappedInitCluster","props","fetchFlowBalance","fmtFUSD","cur","String","replace","filter","Boolean","join","BalanceCluster","flow","useFlowBalance","testnetFaucet","useState","value","setValue","config","useConfig","isNumeric","window","open","WrappedBalanceCluster","fetchMarketItem","t","Number","buyMarketItem","ownerAddress","cancelMarketListing","saleOfferResourceID","expand","split","useMarketItem","ownerItems","cuItems","marketItems","comp","setItem","owned","sansPrefix","buy","cancelListing","name","callback","SET_CALLBACK","PROCESS","MAYBE_PROCESS","TIMEOUT","ENQUEUE","RESOLVE","HANDLERS","INIT","ctx","put","Set","setInterval","sendSelf","letter","uid","hold","reply","update","n","add","h","need","reduce","acc","result","_","results","have","delete","collate","px","push","addresses","enqueue","spawn","expectReply","timeout","fetchAccountItem","createSaleOffer","ItemImage","setItemImage","importedIcon","getImage","AccountItemCluster","accountItems","forSale","sell","useAccountItem","listing","BUSY","WrappedAccountItemCluster","ml","MarketItemCluster","WrappedMarketItemCluster","MarketItemsCluster","length","WrappedMarketItemsCluster","AccountItemsCluster","WrappedAccountItemsCluster","MarketItemsCount","AccountItemsCount","l","MintButton","InfoBanner","type","title","text","Banner","message","my","val","staticType","ReactDOM","render","exact","path","component","useParams","withPrefix","useAddress","fontSize","display","fontWeight","variant","defaultIndex","BackPack","Cookie","document","getElementById"],"mappings":"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","file":"static/js/main.2dec673c.chunk.js","sourcesContent":["var map = {\n\t\"./item01.svg\": [\n\t\t158,\n\t\t4\n\t],\n\t\"./item02.svg\": [\n\t\t159,\n\t\t5\n\t],\n\t\"./item03.svg\": [\n\t\t160,\n\t\t6\n\t],\n\t\"./item04.svg\": [\n\t\t161,\n\t\t7\n\t],\n\t\"./item05.svg\": [\n\t\t162,\n\t\t8\n\t],\n\t\"./item06.svg\": [\n\t\t163,\n\t\t9\n\t],\n\t\"./item07.svg\": [\n\t\t164,\n\t\t10\n\t],\n\t\"./item08.svg\": [\n\t\t165,\n\t\t11\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 152;\nmodule.exports = webpackAsyncContext;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {extendTheme} from \"@chakra-ui/react\"\r\n\r\nconst theme = extendTheme({\r\n  fonts: {\r\n    body: \"'Montserrat', sans-serif\",\r\n    heading: \"'Montserrat', sans-serif\",\r\n  },\r\n  colors: {},\r\n})\r\n\r\nexport default theme\r\n","import React from \"react\"\r\nimport {RecoilRoot} from \"recoil\"\r\nimport {HashRouter as Router} from \"react-router-dom\"\r\nimport {ChakraProvider} from \"@chakra-ui/react\"\r\nimport theme from \"../theme.js\"\r\n\r\nexport function Providers({children}) {\r\n  return (\r\n    <React.StrictMode>\r\n      <RecoilRoot>\r\n        <ChakraProvider theme={theme}>\r\n          <Router>{children}</Router>\r\n        </ChakraProvider>\r\n      </RecoilRoot>\r\n    </React.StrictMode>\r\n  )\r\n}\r\n","export const Base = ({children}) => <div>{children}</div>\r\n","import {useEffect} from \"react\"\r\nimport {atom, useRecoilState} from \"recoil\"\r\nimport * as fcl from \"@onflow/fcl\"\r\n\r\nexport const currentUser = atom({\r\n  key: \"CURRENT_USER\",\r\n  default: {addr: null, loggedIn: null, cid: null},\r\n})\r\n\r\nconst tools = {\r\n  logIn: fcl.logIn,\r\n  logOut: fcl.unauthenticate,\r\n  signUp: fcl.signUp,\r\n  changeUser: fcl.reauthenticate,\r\n}\r\n\r\nexport function useCurrentUser() {\r\n  const [user, setUser] = useRecoilState(currentUser)\r\n  useEffect(() => fcl.currentUser().subscribe(setUser), [setUser])\r\n  return [user, user.addr != null, tools]\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo-kv.ee8839ea.svg\";","export const LOADING = \"LOADING\"\r\n\r\n// Exposed states of a Flow Transaction\r\nexport const IDLE = \"IDLE\"\r\nexport const PROCESSING = \"PROCESSING\"\r\nexport const SUCCESS = \"SUCCESS\"\r\nexport const ERROR = \"ERROR\"\r\n\r\n// How long to pause on a success or error message\r\n// before transitioning back to an IDLE state.\r\nexport const IDLE_DELAY = 1000\r\n","const fetcher = url => fetch(url).then(res => res.json())\r\n\r\nexport default fetcher\r\n","import {atom, useRecoilState} from \"recoil\"\r\nimport useSWR from \"swr\"\r\nimport {IDLE, LOADING} from \"../global/constants\"\r\nimport fetcher from \"../util/fetcher\"\r\nimport normalizeItem from \"../util/normalize-item\"\r\n\r\nexport const $marketItemsState = atom({\r\n  key: \"market-items::state\",\r\n  default: [],\r\n})\r\n\r\nexport const $marketItemsStatus = atom({\r\n  key: \"market-items::status\",\r\n  default: IDLE,\r\n})\r\n\r\nexport function useMarketItems() {\r\n  const url = process.env.REACT_APP_API_MARKET_ITEMS_LIST\r\n  const [status, setStatus] = useRecoilState($marketItemsStatus)\r\n  const [items, setItems] = useRecoilState($marketItemsState)\r\n\r\n  useSWR(url, fetcher, {\r\n    initialData: items,\r\n    refreshInterval: 10,\r\n    onLoadingSlow: () => {\r\n      setStatus(LOADING)\r\n    },\r\n    onSuccess: ({latestSaleOffers}) => {\r\n      setItems(latestSaleOffers.map(item => normalizeItem(item)))\r\n      setStatus(IDLE)\r\n    },\r\n    onError: error => {\r\n      console.log(\"Failed to fetch market items.\", error)\r\n    },\r\n  })\r\n\r\n  const asMap = new Map(items.map(item => [item.itemID, item]))\r\n\r\n  return {\r\n    status,\r\n    items,\r\n    has(item) {\r\n      return asMap.has(item.itemID)\r\n    },\r\n    findSaleOffer(itemId) {\r\n      const item = asMap.get(itemId)\r\n      if (item) return item.resourceID\r\n      return undefined\r\n    },\r\n  }\r\n}\r\n","export default function normalizeItem(item) {\r\n  return Object.assign(\r\n    {},\r\n    {\r\n      itemID: item.sale_item_id,\r\n      resourceID: item.sale_item_resource_id,\r\n      typeID: item.sale_item_type,\r\n      owner: item.sale_item_owner,\r\n      price: item.sale_price,\r\n      txID: item.transaction_id,\r\n    }\r\n  )\r\n}\r\n","import * as fcl from \"@onflow/fcl\"\r\nimport {Address} from \"@onflow/types\"\r\n\r\nconst CODE = fcl.cdc`\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import KittyItems from 0xKittyItems\r\n\r\n  pub fun main(address: Address): [UInt64] {\r\n    if let collection =  getAccount(address).getCapability<&KittyItems.Collection{NonFungibleToken.CollectionPublic, KittyItems.KittyItemsCollectionPublic}>(KittyItems.CollectionPublicPath).borrow() {\r\n      return collection.getIDs()\r\n    }\r\n\r\n    return []\r\n  }\r\n`\r\n\r\nexport function fetchAccountItems(address) {\r\n  if (address == null) return Promise.resolve([])\r\n\r\n  // prettier-ignore\r\n  return fcl.send([\r\n    fcl.script(CODE),\r\n    fcl.args([\r\n      fcl.arg(address, Address)\r\n    ]),\r\n  ]).then(fcl.decode).then(d => d.sort((a, b) => a - b))\r\n}\r\n","import {atomFamily, selectorFamily, useRecoilState} from \"recoil\"\r\nimport {fetchAccountItems} from \"../flow/script.get-account-items\"\r\nimport {IDLE, PROCESSING} from \"../global/constants\"\r\n\r\nexport const $state = atomFamily({\r\n  key: \"account-items::state\",\r\n  default: selectorFamily({\r\n    key: \"account-items::default\",\r\n    get: address => async () => fetchAccountItems(address),\r\n  }),\r\n})\r\n\r\nexport const $status = atomFamily({\r\n  key: \"account-items::status\",\r\n  default: IDLE,\r\n})\r\n\r\nexport function useAccountItems(address) {\r\n  const [items, setItems] = useRecoilState($state(address))\r\n  const [status, setStatus] = useRecoilState($status(address))\r\n\r\n  return {\r\n    ids: items,\r\n    status,\r\n\r\n    async mint() {\r\n      setStatus(PROCESSING)\r\n      await fetch(process.env.REACT_APP_API_KITTY_ITEM_MINT, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          recipient: address,\r\n          // Random typeID between 1 - 5\r\n          typeID: Math.floor(Math.random() * (5 - 1)) + 1,\r\n        }),\r\n      })\r\n      await fetchAccountItems(address).then(setItems)\r\n      setStatus(IDLE)\r\n    },\r\n    async refresh() {\r\n      setStatus(PROCESSING)\r\n      await fetchAccountItems(address).then(setItems)\r\n      setStatus(IDLE)\r\n    },\r\n  }\r\n}\r\n","import {send, decode, script, args, arg, cdc} from \"@onflow/fcl\"\r\nimport {Address} from \"@onflow/types\"\r\n\r\nconst CODE = cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import FUSD from 0xFUSD\r\n  import KittyItems from 0xKittyItems\r\n  import NFTStorefront from 0xNFTStorefront\r\n\r\n  pub fun hasFUSD(_ address: Address): Bool {\r\n    let receiver: Bool = getAccount(address)\r\n      .getCapability<&FUSD.Vault{FungibleToken.Receiver}>(/public/fusdReceiver)\r\n      .check()\r\n\r\n    let balance: Bool = getAccount(address)\r\n      .getCapability<&FUSD.Vault{FungibleToken.Balance}>(/public/fusdBalance)\r\n      .check()\r\n\r\n    return receiver && balance\r\n  }\r\n\r\n  pub fun hasItems(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&KittyItems.Collection{NonFungibleToken.CollectionPublic, KittyItems.KittyItemsCollectionPublic}>(KittyItems.CollectionPublicPath)\r\n      .check()\r\n  }\r\n\r\n  pub fun hasStorefront(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath)\r\n      .check()\r\n  }\r\n\r\n  pub fun main(address: Address): {String: Bool} {\r\n    let ret: {String: Bool} = {}\r\n    ret[\"FUSD\"] = hasFUSD(address)\r\n    ret[\"KittyItems\"] = hasItems(address)\r\n    ret[\"KittyItemsMarket\"] = hasStorefront(address)\r\n    return ret\r\n  }\r\n`\r\n\r\nexport function isAccountInitialized(address) {\r\n  if (address == null) return Promise.resolve(false)\r\n\r\n  // prettier-ignore\r\n  return send([\r\n    script(CODE),\r\n    args([\r\n      arg(address, Address)\r\n    ])\r\n  ]).then(decode)\r\n}\r\n","import * as fcl from \"@onflow/fcl\"\r\n\r\nconst noop = async () => {}\r\n\r\nexport async function tx(mods = [], opts = {}) {\r\n  const onStart = opts.onStart || noop\r\n  const onSubmission = opts.onSubmission || noop\r\n  const onUpdate = opts.onUpdate || noop\r\n  const onSuccess = opts.onSuccess || noop\r\n  const onError = opts.onError || noop\r\n  const onComplete = opts.onComplete || noop\r\n\r\n  try {\r\n    onStart()\r\n    var txId = await fcl.send(mods).then(fcl.decode)\r\n    console.info(\r\n      `%cTX[${txId}]: ${fvsTx(await fcl.config().get(\"env\"), txId)}`,\r\n      \"color:purple;font-weight:bold;font-family:monospace;\"\r\n    )\r\n    onSubmission(txId)\r\n    var unsub = await fcl.tx(txId).subscribe(onUpdate)\r\n    var txStatus = await fcl.tx(txId).onceSealed()\r\n    unsub()\r\n    console.info(\r\n      `%cTX[${txId}]: ${fvsTx(await fcl.config().get(\"env\"), txId)}`,\r\n      \"color:green;font-weight:bold;font-family:monospace;\"\r\n    )\r\n    await onSuccess(txStatus)\r\n    return txStatus\r\n  } catch (error) {\r\n    console.error(\r\n      `TX[${txId}]: ${fvsTx(await fcl.config().get(\"env\"), txId)}`,\r\n      error\r\n    )\r\n    onError(error)\r\n  } finally {\r\n    await onComplete()\r\n  }\r\n}\r\n\r\nfunction fvsTx(env, txId) {\r\n  return `https://flow-view-source.com/${env}/tx/${txId}`\r\n}\r\n","// prettier-ignore\r\nimport {transaction, limit, proposer, payer, authorizations, authz, cdc} from \"@onflow/fcl\"\r\nimport {invariant} from \"@onflow/util-invariant\"\r\nimport {tx} from \"./util/tx\"\r\n\r\nconst CODE = cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import FUSD from 0xFUSD\r\n  import KittyItems from 0xKittyItems\r\n  import NFTStorefront from 0xNFTStorefront\r\n\r\n  pub fun hasFUSD(_ address: Address): Bool {\r\n    let receiver = getAccount(address)\r\n      .getCapability<&FUSD.Vault{FungibleToken.Receiver}>(/public/fusdReceiver)\r\n      .check()\r\n\r\n    let balance = getAccount(address)\r\n      .getCapability<&FUSD.Vault{FungibleToken.Balance}>(/public/fusdBalance)\r\n      .check()\r\n\r\n    return receiver && balance\r\n  }\r\n\r\n  pub fun hasItems(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&KittyItems.Collection{NonFungibleToken.CollectionPublic, KittyItems.KittyItemsCollectionPublic}>(KittyItems.CollectionPublicPath)\r\n      .check()\r\n  }\r\n\r\n  pub fun hasStorefront(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath)\r\n      .check()\r\n  }\r\n\r\n  transaction {\r\n    prepare(acct: AuthAccount) {\r\n      if !hasFUSD(acct.address) {\r\n        if acct.borrow<&FUSD.Vault>(from: /storage/fusdVault) == nil {\r\n          acct.save(<-FUSD.createEmptyVault(), to: /storage/fusdVault)\r\n        }\r\n        acct.unlink(/public/fusdReceiver)\r\n        acct.unlink(/public/fusdBalance)\r\n        acct.link<&FUSD.Vault{FungibleToken.Receiver}>(/public/fusdReceiver, target: /storage/fusdVault)\r\n        acct.link<&FUSD.Vault{FungibleToken.Balance}>(/public/fusdBalance, target: /storage/fusdVault)\r\n      }\r\n\r\n      if !hasItems(acct.address) {\r\n        if acct.borrow<&KittyItems.Collection>(from: KittyItems.CollectionStoragePath) == nil {\r\n          acct.save(<-KittyItems.createEmptyCollection(), to: KittyItems.CollectionStoragePath)\r\n        }\r\n        acct.unlink(KittyItems.CollectionPublicPath)\r\n        acct.link<&KittyItems.Collection{NonFungibleToken.CollectionPublic, KittyItems.KittyItemsCollectionPublic}>(KittyItems.CollectionPublicPath, target: KittyItems.CollectionStoragePath)\r\n      }\r\n\r\n      if !hasStorefront(acct.address) {\r\n        if acct.borrow<&NFTStorefront.Storefront>(from: NFTStorefront.StorefrontStoragePath) == nil {\r\n          acct.save(<-NFTStorefront.createStorefront(), to: NFTStorefront.StorefrontStoragePath)\r\n        }\r\n        acct.unlink(NFTStorefront.StorefrontPublicPath)\r\n        acct.link<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath, target: NFTStorefront.StorefrontStoragePath)\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport async function initializeAccount(address, opts = {}) {\r\n  // prettier-ignore\r\n  invariant(address != null, \"Tried to initialize an account but no address was supplied\")\r\n\r\n  return tx(\r\n    [\r\n      transaction(CODE),\r\n      limit(70),\r\n      proposer(authz),\r\n      payer(authz),\r\n      authorizations([authz]),\r\n    ],\r\n    opts\r\n  )\r\n}\r\n","export function sleep(ms = 500) {\r\n  return new Promise(resolve => {\r\n    setTimeout(resolve, ms)\r\n  })\r\n}\r\n","import {send, decode, script, args, arg, cdc} from \"@onflow/fcl\"\r\nimport {Address} from \"@onflow/types\"\r\n\r\nconst CODE = cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n\r\n  pub fun main(addr: Address): UFix64 {\r\n    return getAccount(addr)\r\n      .getCapability<&{FungibleToken.Balance}>(/public/fusdBalance)\r\n      .borrow()?.balance ?? 0.0\r\n  }\r\n\r\n`\r\n\r\nexport function fetchFUSDBalance(address) {\r\n  if (address == null) return Promise.resolve(false)\r\n\r\n  // prettier-ignore\r\n  return send([\r\n    script(CODE),\r\n    args([\r\n      arg(address, Address)\r\n    ])\r\n  ]).then(decode)\r\n}\r\n","import {atomFamily, selectorFamily, useRecoilState} from \"recoil\"\r\nimport {fetchFUSDBalance} from \"../flow/script.get-fusd-balance\"\r\nimport {IDLE, PROCESSING} from \"../global/constants\"\r\n\r\nexport const valueAtom = atomFamily({\r\n  key: \"fusd-balance::state\",\r\n  default: selectorFamily({\r\n    key: \"fusd-balance::default\",\r\n    get: address => async () => fetchFUSDBalance(address),\r\n  }),\r\n})\r\n\r\nexport const statusAtom = atomFamily({\r\n  key: \"fusd-balance::status\",\r\n  default: IDLE,\r\n})\r\n\r\nexport function useFUSDBalance(address) {\r\n  const [balance, setBalance] = useRecoilState(valueAtom(address))\r\n  const [status, setStatus] = useRecoilState(statusAtom(address))\r\n\r\n  async function refresh() {\r\n    setStatus(PROCESSING)\r\n    await fetchFUSDBalance(address).then(setBalance)\r\n    setStatus(IDLE)\r\n  }\r\n\r\n  return {\r\n    balance,\r\n    status,\r\n    refresh,\r\n    async mint() {\r\n      setStatus(PROCESSING)\r\n      await fetch(process.env.REACT_APP_API_FUSD_MINT, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          recipient: address,\r\n          amount: 50.0,\r\n        }),\r\n      })\r\n      await fetchFUSDBalance(address).then(setBalance)\r\n      setStatus(IDLE)\r\n    },\r\n  }\r\n}\r\n","import {\r\n  atomFamily,\r\n  selectorFamily,\r\n  useRecoilState,\r\n  useRecoilValue,\r\n} from \"recoil\"\r\nimport {\r\n  LOADING,\r\n  IDLE,\r\n  PROCESSING,\r\n  SUCCESS,\r\n  ERROR,\r\n  IDLE_DELAY,\r\n} from \"../global/constants\"\r\nimport {isAccountInitialized} from \"../flow/script.is-account-initialized\"\r\nimport {initializeAccount} from \"../flow/tx.initialize-account\"\r\nimport {sleep} from \"../util/sleep\"\r\nimport {useFUSDBalance} from \"./use-fusd-balance.hook\"\r\n\r\nexport const $status = atomFamily({\r\n  key: \"init::status\",\r\n  default: IDLE,\r\n})\r\n\r\nexport const $init = atomFamily({\r\n  key: \"init::state\",\r\n  default: selectorFamily({\r\n    key: \"init::default\",\r\n    get: address => () => isAccountInitialized(address),\r\n  }),\r\n})\r\n\r\nexport const $computedInit = selectorFamily({\r\n  key: \"init::computed\",\r\n  get:\r\n    address =>\r\n    async ({get}) => {\r\n      const all = get($init(address))\r\n      return all.FUSD && all.KittyItems && all.KittyItemsMarket\r\n    },\r\n})\r\n\r\nexport function useInitialized(address) {\r\n  const [init, setInit] = useRecoilState($init(address))\r\n  const isInitialized = useRecoilValue($computedInit(address))\r\n  const [status, setStatus] = useRecoilState($status(address))\r\n  const fusd = useFUSDBalance(address)\r\n\r\n  function recheck() {\r\n    isAccountInitialized(address).then(setInit)\r\n  }\r\n\r\n  return {\r\n    ...init,\r\n    isInitialized,\r\n    status: isInitialized == null ? LOADING : status,\r\n    recheck,\r\n    async initialize() {\r\n      initializeAccount(address, {\r\n        onStart() {\r\n          setStatus(PROCESSING)\r\n        },\r\n        async onSuccess() {\r\n          recheck()\r\n          fusd.refresh()\r\n          setStatus(SUCCESS)\r\n        },\r\n        onError() {\r\n          setStatus(ERROR)\r\n        },\r\n        async onComplete() {\r\n          await sleep(IDLE_DELAY)\r\n          setStatus(IDLE)\r\n        },\r\n      })\r\n    },\r\n  }\r\n}\r\n","import {Suspense} from \"react\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {Link as A} from \"react-router-dom\"\r\nimport {\r\n  Flex,\r\n  Box,\r\n  Spacer,\r\n  Link,\r\n  Center,\r\n  HStack,\r\n  Heading,\r\n  Button,\r\n  Divider,\r\n  Image,\r\n} from \"@chakra-ui/react\"\r\n\r\nimport Logo from \"../svg/logo-kv.svg\"\r\n\r\nexport function AuthCluster() {\r\n  const [user, loggedIn, {signUp, logIn, logOut}] = useCurrentUser()\r\n\r\n  return loggedIn ? (\r\n    <Box mb=\"4\">\r\n      <Flex>\r\n        <HStack>\r\n          <Image src={Logo} />\r\n          <Heading size=\"lg\">Kitty Items</Heading>\r\n        </HStack>\r\n        <Spacer />\r\n        <Center>\r\n          <Link as={A} mr=\"4\" to={\"/\" + user.addr}>\r\n            {user.addr}\r\n          </Link>\r\n        </Center>\r\n        <Box>\r\n          <Button mr=\"4\" colorScheme=\"blue\" onClick={logOut}>\r\n            Log Out\r\n          </Button>\r\n        </Box>\r\n      </Flex>\r\n    </Box>\r\n  ) : (\r\n    <Box>\r\n      <Flex>\r\n        <Box p=\"2\">\r\n          <HStack>\r\n            <Image src={Logo} />\r\n            <Heading size=\"lg\">Kitty Items</Heading>\r\n          </HStack>\r\n        </Box>\r\n        <Spacer />\r\n        <Box>\r\n          <Button mr=\"4\" colorScheme=\"blue\" onClick={logIn}>\r\n            Log In\r\n          </Button>\r\n          <Button mr=\"4\" colorScheme=\"blue\" onClick={signUp}>\r\n            Sign Up\r\n          </Button>\r\n        </Box>\r\n      </Flex>\r\n      <Divider mb=\"4\" />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default function WrappedAuthCluster() {\r\n  return (\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n      <AuthCluster />\r\n    </Suspense>\r\n  )\r\n}\r\n","import {Suspense} from \"react\"\r\nimport {useInitialized} from \"../hooks/use-initialized.hook\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {IDLE} from \"../global/constants\"\r\nimport {\r\n  Box,\r\n  Button,\r\n  Table,\r\n  Tbody,\r\n  Tr,\r\n  Td,\r\n  Flex,\r\n  Heading,\r\n  Spinner,\r\n  Center,\r\n} from \"@chakra-ui/react\"\r\nimport {CheckIcon, CloseIcon} from \"@chakra-ui/icons\"\r\n\r\nconst fmtBool = bool =>\r\n  bool ? <CheckIcon color=\"green.500\" /> : <CloseIcon color=\"red.500\" />\r\n\r\nexport function InitCluster({address}) {\r\n  const init = useInitialized(address)\r\n  const [cu] = useCurrentUser()\r\n  if (address == null) return null\r\n\r\n  return (\r\n    <Box mb=\"4\">\r\n      <Box mb=\"2\">\r\n        <Flex>\r\n          <Heading size=\"md\" mr=\"4\">\r\n            Account Initialized?\r\n          </Heading>\r\n          {init.status !== IDLE && (\r\n            <Center>\r\n              <Spinner />\r\n            </Center>\r\n          )}\r\n        </Flex>\r\n      </Box>\r\n      <Box maxW=\"200px\" borderWidth=\"1px\" borderRadius=\"lg\">\r\n        <Table size=\"sm\">\r\n          <Tbody>\r\n            <Tr>\r\n              <Td>FUSD</Td>\r\n              <Td>{fmtBool(init.FUSD)}</Td>\r\n            </Tr>\r\n            <Tr>\r\n              <Td>Kitty Items</Td>\r\n              <Td>{fmtBool(init.KittyItems)}</Td>\r\n            </Tr>\r\n            <Tr>\r\n              <Td>Kitty Items Market</Td>\r\n              <Td>{fmtBool(init.KittyItemsMarket)}</Td>\r\n            </Tr>\r\n          </Tbody>\r\n        </Table>\r\n      </Box>\r\n      {!init.isInitialized && address === cu.addr && (\r\n        <Box mt=\"2\">\r\n          <Flex>\r\n            <Button\r\n              colorScheme=\"blue\"\r\n              disabled={init.status !== IDLE}\r\n              onClick={init.initialize}\r\n            >\r\n              Initialize Account\r\n            </Button>\r\n          </Flex>\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default function WrappedInitCluster(props) {\r\n  const [cu] = useCurrentUser()\r\n  if (cu.addr !== props.address) return null\r\n\r\n  return (\r\n    <Suspense\r\n      fallback={\r\n        <Box mb=\"2\">\r\n          <Flex>\r\n            <Heading size=\"md\" mr=\"4\">\r\n              Account Initialized?\r\n            </Heading>\r\n            <Center>\r\n              <Spinner size=\"sm\" />\r\n            </Center>\r\n          </Flex>\r\n        </Box>\r\n      }\r\n    >\r\n      <InitCluster {...props} />\r\n    </Suspense>\r\n  )\r\n}\r\n","import * as fcl from \"@onflow/fcl\"\r\n\r\nexport function fetchFlowBalance(address) {\r\n  if (address == null) return Promise.resolve(null)\r\n  return fcl.account(address).then(d => d.balance)\r\n}\r\n","import {atomFamily, selectorFamily, useRecoilState} from \"recoil\"\r\nimport {fetchFlowBalance} from \"../flow/script.get-flow-balance\"\r\nimport {IDLE, PROCESSING} from \"../global/constants\"\r\n\r\nexport const valueAtom = atomFamily({\r\n  key: \"flow-balance::state\",\r\n  default: selectorFamily({\r\n    key: \"flow-balance::default\",\r\n    get: address => async () => fetchFlowBalance(address),\r\n  }),\r\n})\r\n\r\nexport const statusAtom = atomFamily({\r\n  key: \"flow-balance::status\",\r\n  default: IDLE,\r\n})\r\n\r\nexport function useFlowBalance(address) {\r\n  const [balance, setBalance] = useRecoilState(valueAtom(address))\r\n  const [status, setStatus] = useRecoilState(statusAtom(address))\r\n\r\n  return {\r\n    balance,\r\n    status,\r\n    async refresh() {\r\n      setStatus(PROCESSING)\r\n      await fetchFlowBalance(address).then(setBalance)\r\n      setStatus(IDLE)\r\n    },\r\n  }\r\n}\r\n","export function fmtFUSD(balance, cur = false) {\r\n  if (balance == null) return null\r\n  return [String(balance).replace(/0+$/, \"\").replace(/\\.$/, \"\"), cur && \"FUSD\"]\r\n    .filter(Boolean)\r\n    .join(\" \")\r\n}\r\n","import {Suspense} from \"react\"\r\nimport {useFlowBalance} from \"../hooks/use-flow-balance.hook\"\r\nimport {useFUSDBalance} from \"../hooks/use-fusd-balance.hook\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {useConfig} from \"../hooks/use-config.hook\"\r\nimport {IDLE} from \"../global/constants\"\r\nimport {fmtFUSD} from \"../util/fmt-fusd\"\r\nimport {\r\n  Box,\r\n  Button,\r\n  Table,\r\n  Tbody,\r\n  Tr,\r\n  Td,\r\n  Flex,\r\n  Heading,\r\n  Spinner,\r\n  Center,\r\n} from \"@chakra-ui/react\"\r\nimport {useInitialized} from \"../hooks/use-initialized.hook\"\r\n\r\nexport function BalanceCluster({address}) {\r\n  const flow = useFlowBalance(address)\r\n  const fusd = useFUSDBalance(address)\r\n  const init = useInitialized(address)\r\n  const testnetFaucet = useConfig(\"faucet\")\r\n\r\n  function openFaucet() {\r\n    window.open(testnetFaucet)\r\n  }\r\n\r\n  return (\r\n    <Box mb=\"4\">\r\n      <Box mb=\"2\">\r\n        <Flex>\r\n          <Heading size=\"md\" mr=\"4\">\r\n            Balances\r\n          </Heading>\r\n          {(flow.status !== IDLE || fusd.status !== IDLE) && (\r\n            <Center>\r\n              <Spinner size=\"sm\" />\r\n            </Center>\r\n          )}\r\n        </Flex>\r\n      </Box>\r\n      <Box maxW=\"200px\" borderWidth=\"1px\" borderRadius=\"lg\">\r\n        <Table size=\"sm\">\r\n          <Tbody>\r\n            <Tr>\r\n              <Td>FUSD</Td>\r\n              {fusd.status === IDLE ? (\r\n                <Td isNumeric>{fmtFUSD(fusd.balance)}</Td>\r\n              ) : (\r\n                <Td isNumeric>\r\n                  <Spinner size=\"sm\" />\r\n                </Td>\r\n              )}\r\n            </Tr>\r\n          </Tbody>\r\n        </Table>\r\n      </Box>\r\n      <Box mt=\"2\">\r\n        <Flex>\r\n          <Button\r\n            colorScheme=\"blue\"\r\n            disabled={fusd.status !== IDLE || !init.isInitialized}\r\n            onClick={() => (testnetFaucet ? openFaucet() : fusd.mint())}\r\n          >\r\n            Request FUSD\r\n          </Button>\r\n        </Flex>\r\n      </Box>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default function WrappedBalanceCluster(props) {\r\n  const [cu] = useCurrentUser()\r\n  if (cu.addr !== props.address) return null\r\n\r\n  return (\r\n    <Suspense\r\n      fallback={\r\n        <Flex>\r\n          <Heading size=\"md\" mr=\"4\">\r\n            Balances\r\n          </Heading>\r\n          <Center>\r\n            <Spinner size=\"sm\" />\r\n          </Center>\r\n        </Flex>\r\n      }\r\n    >\r\n      <BalanceCluster {...props} />\r\n    </Suspense>\r\n  )\r\n}\r\n","import {useEffect, useState} from \"react\"\r\nimport {config} from \"@onflow/fcl\"\r\n\r\nexport function useConfig(key, fallback) {\r\n  const [value, setValue] = useState(null)\r\n\r\n  useEffect(() => {\r\n    config().get(key, fallback).then(setValue)\r\n  }, [key, fallback])\r\n\r\n  return value\r\n}\r\n","import * as fcl from \"@onflow/fcl\"\r\nimport * as t from \"@onflow/types\"\r\n\r\nexport async function fetchMarketItem(address, id) {\r\n  return fcl\r\n    .send([\r\n      fcl.script`\r\n        import NFTStorefront from 0xNFTStorefront\r\n        import KittyItems from 0xKittyItems\r\n        import NonFungibleToken from 0xNonFungibleToken\r\n\r\n        pub struct SaleItem {\r\n          pub let itemID: UInt64\r\n          pub let typeID: UInt64\r\n          pub let owner: Address\r\n          pub let price: UFix64\r\n\r\n          init(itemID: UInt64, typeID: UInt64, owner: Address, price: UFix64) {\r\n            self.itemID = itemID\r\n            self.typeID = typeID\r\n            self.owner = owner\r\n            self.price = price\r\n          }\r\n        }\r\n\r\n        pub fun main(address: Address, saleOfferResourceID: UInt64): SaleItem? {\r\n          let account = getAccount(address)\r\n\r\n          if let storefrontRef = account.getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath).borrow() {\r\n            if let saleOffer = storefrontRef.borrowSaleOffer(saleOfferResourceID: saleOfferResourceID) {\r\n              let details = saleOffer.getDetails()\r\n\r\n              let itemID = details.nftID\r\n              let itemPrice = details.salePrice\r\n\r\n              if let collection = account.getCapability<&KittyItems.Collection{NonFungibleToken.CollectionPublic, KittyItems.KittyItemsCollectionPublic}>(KittyItems.CollectionPublicPath).borrow() {\r\n                if let item = collection.borrowKittyItem(id: itemID) {\r\n                  return SaleItem(itemID: itemID, typeID: item.typeID, owner: address, price: itemPrice)\r\n                }\r\n              }\r\n            }\r\n          }\r\n            \r\n          return nil\r\n        }\r\n    `,\r\n      fcl.args([fcl.arg(address, t.Address), fcl.arg(Number(id), t.UInt64)]),\r\n    ])\r\n    .then(fcl.decode)\r\n}\r\n","import * as fcl from \"@onflow/fcl\"\r\nimport * as t from \"@onflow/types\"\r\nimport {tx} from \"./util/tx\"\r\nimport {invariant} from \"@onflow/util-invariant\"\r\n\r\nconst CODE = fcl.cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import FUSD from 0xFUSD\r\n  import KittyItems from 0xKittyItems\r\n  import NFTStorefront from 0xNFTStorefront\r\n\r\n  transaction(saleOfferResourceID: UInt64, storefrontAddress: Address) {\r\n\r\n    let paymentVault: @FungibleToken.Vault\r\n    let kittyItemsCollection: &KittyItems.Collection{NonFungibleToken.Receiver}\r\n    let storefront: &NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}\r\n    let saleOffer: &NFTStorefront.SaleOffer{NFTStorefront.SaleOfferPublic}\r\n\r\n    prepare(account: AuthAccount) {\r\n      self.storefront = getAccount(storefrontAddress)\r\n        .getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(\r\n          NFTStorefront.StorefrontPublicPath\r\n        )!\r\n        .borrow()\r\n        ?? panic(\"Could not borrow Storefront from provided address\")\r\n\r\n      self.saleOffer = self.storefront.borrowSaleOffer(saleOfferResourceID: saleOfferResourceID)\r\n        ?? panic(\"No Offer with that ID in Storefront\")\r\n      \r\n      let price = self.saleOffer.getDetails().salePrice\r\n\r\n      let mainFUSDVault = account.borrow<&FUSD.Vault>(from: /storage/fusdVault)\r\n        ?? panic(\"Cannot borrow Kibble vault from account storage\")\r\n      \r\n      self.paymentVault <- mainFUSDVault.withdraw(amount: price)\r\n\r\n      self.kittyItemsCollection = account.borrow<&KittyItems.Collection{NonFungibleToken.Receiver}>(\r\n        from: KittyItems.CollectionStoragePath\r\n      ) ?? panic(\"Cannot borrow KittyItems collection receiver from account\")\r\n    }\r\n  \r\n    execute {\r\n      let item <- self.saleOffer.accept(\r\n        payment: <-self.paymentVault\r\n      )\r\n\r\n      self.kittyItemsCollection.deposit(token: <-item)\r\n\r\n      self.storefront.cleanup(saleOfferResourceID: saleOfferResourceID)\r\n    }\r\n  }\r\n`\r\n\r\n// prettier-ignore\r\nexport function buyMarketItem({itemID, ownerAddress}, opts = {}) {\r\n  invariant(itemID != null, \"buyMarketItem({itemID, ownerAddress}) -- itemID required\")\r\n  invariant(ownerAddress != null, \"buyMarketItem({itemID, ownerAddress}) -- ownerAddress required\")\r\n\r\n  return tx([\r\n    fcl.transaction(CODE),\r\n    fcl.args([\r\n      fcl.arg(Number(itemID), t.UInt64),\r\n      fcl.arg(String(ownerAddress), t.Address),\r\n    ]),\r\n    fcl.proposer(fcl.authz),\r\n    fcl.payer(fcl.authz),\r\n    fcl.authorizations([fcl.authz]),\r\n    fcl.limit(1000),\r\n  ], opts)\r\n}\r\n","import * as fcl from \"@onflow/fcl\"\r\nimport * as t from \"@onflow/types\"\r\nimport {tx} from \"./util/tx\"\r\nimport {invariant} from \"@onflow/util-invariant\"\r\n\r\nconst CODE = fcl.cdc`\r\n  import NFTStorefront from 0xNFTStorefront\r\n\r\n  transaction(saleOfferResourceID: UInt64) {\r\n    let storefront: &NFTStorefront.Storefront{NFTStorefront.StorefrontManager}\r\n\r\n    prepare(acct: AuthAccount) {\r\n      self.storefront = acct.borrow<&NFTStorefront.Storefront{NFTStorefront.StorefrontManager}>(from: NFTStorefront.StorefrontStoragePath)\r\n        ?? panic(\"Missing or mis-typed NFTStorefront.Storefront\")\r\n    }\r\n\r\n    execute {\r\n      self.storefront.removeSaleOffer(saleOfferResourceID: saleOfferResourceID)\r\n    }\r\n  }\r\n`\r\n\r\n// prettier-ignore\r\nexport function cancelMarketListing({saleOfferResourceID}, opts = {}) {\r\n  invariant(\r\n    saleOfferResourceID != null,\r\n    \"cancelMarketListing({saleOfferResourceID}) -- saleOfferResourceID required\"\r\n  )\r\n\r\n  return tx(\r\n    [\r\n      fcl.transaction(CODE),\r\n      fcl.args([fcl.arg(Number(saleOfferResourceID), t.UInt64)]),\r\n      fcl.proposer(fcl.authz),\r\n      fcl.payer(fcl.authz),\r\n      fcl.authorizations([fcl.authz]),\r\n      fcl.limit(1000),\r\n    ],\r\n    opts\r\n  )\r\n}\r\n","import {useEffect} from \"react\"\r\nimport {atomFamily, selectorFamily, useRecoilState} from \"recoil\"\r\nimport {sansPrefix} from \"@onflow/fcl\"\r\nimport {IDLE, PROCESSING} from \"../global/constants\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {useAccountItems} from \"../hooks/use-account-items.hook\"\r\nimport {useFUSDBalance} from \"../hooks/use-fusd-balance.hook\"\r\nimport {fetchMarketItem} from \"../flow/script.get-market-item\"\r\nimport {buyMarketItem} from \"../flow/tx.buy-market-item\"\r\nimport {cancelMarketListing} from \"../flow/tx.remove-sale-offer\"\r\nimport {useMarketItems} from \"../hooks/use-market-items.hook\"\r\n\r\nfunction expand(key) {\r\n  return key.split(\"|\")\r\n}\r\n\r\nfunction comp(address, id) {\r\n  return [address, id].join(\"|\")\r\n}\r\n\r\nexport const $state = atomFamily({\r\n  key: \"market-item::state\",\r\n  default: selectorFamily({\r\n    key: \"market-item::default\",\r\n    get: key => async () => await fetchMarketItem(...expand(key)),\r\n  }),\r\n})\r\n\r\nexport const $status = atomFamily({\r\n  key: \"market-item::status\",\r\n  default: IDLE,\r\n})\r\n\r\nexport function useMarketItem(address, id) {\r\n  const [cu] = useCurrentUser()\r\n  const ownerItems = useAccountItems(address)\r\n  const cuItems = useAccountItems(cu.addr)\r\n  const marketItems = useMarketItems()\r\n  const fusd = useFUSDBalance(cu.addr)\r\n  const key = comp(address, id)\r\n  const [item, setItem] = useRecoilState($state(key))\r\n  const [status, setStatus] = useRecoilState($status(key))\r\n  const owned = sansPrefix(cu.addr) === sansPrefix(address)\r\n\r\n  useEffect(() => {\r\n    fetchMarketItem(...expand(key)).then(setItem)\r\n  }, [])\r\n\r\n  return {\r\n    ...item,\r\n    status,\r\n    owned,\r\n    async buy() {\r\n      await buyMarketItem(\r\n        {itemID: id, ownerAddress: address},\r\n        {\r\n          onStart() {\r\n            setStatus(PROCESSING)\r\n          },\r\n          async onSuccess() {\r\n            if (address !== cu.addr) {\r\n              ownerItems.refresh()\r\n            }\r\n            cuItems.refresh()\r\n            fusd.refresh()\r\n          },\r\n          async onComplete() {\r\n            setStatus(IDLE)\r\n          },\r\n          async onError(error) {\r\n            // TODO: Handle error\r\n          },\r\n        }\r\n      )\r\n    },\r\n    async cancelListing() {\r\n      const saleOfferResourceID = marketItems.findSaleOffer(\r\n        item ? item.itemID : id\r\n      )\r\n\r\n      await cancelMarketListing(\r\n        {saleOfferResourceID: saleOfferResourceID},\r\n        {\r\n          onStart() {\r\n            setStatus(PROCESSING)\r\n          },\r\n          async onSuccess() {\r\n            if (address !== cu.addr) {\r\n              ownerItems.refresh()\r\n            }\r\n            cuItems.refresh()\r\n            fusd.refresh()\r\n          },\r\n          async onComplete() {\r\n            setStatus(IDLE)\r\n          },\r\n          async onError(error) {\r\n            // TODO: Handle error\r\n          },\r\n        }\r\n      )\r\n    },\r\n    async refresh() {\r\n      setStatus(PROCESSING)\r\n      await fetchMarketItem(...expand(key)).then(setItem)\r\n      setStatus(IDLE)\r\n    },\r\n  }\r\n}\r\n","// TODO: MOVE TO @onflow/util-batch\r\nimport {spawn, send, INIT} from \"@onflow/util-actor\"\r\nimport {uid} from \"@onflow/util-uid\"\r\n\r\nconst TICK = 500\r\nconst BUFFER_SIZE = 10\r\n\r\nconst SET_CALLBACK = \"SET_CALLBACK\"\r\nconst PROCESS = \"PROCESS\"\r\nconst MAYBE_PROCESS = \"MAYBE_PROCESS\"\r\nconst TIMEOUT = \"TIMEOUT\"\r\nconst ENQUEUE = \"ENQUEUE\"\r\nconst RESOLVE = \"RESOLVE\"\r\n\r\nconst HANDLERS = {\r\n  [INIT]: ctx => {\r\n    ctx.put(\"need\", new Set())\r\n    ctx.put(\"processing\", new Set())\r\n    ctx.put(\"hold\", {})\r\n    setInterval(() => ctx.sendSelf(TIMEOUT), TICK)\r\n  },\r\n\r\n  [SET_CALLBACK]: (ctx, letter, callback) => {\r\n    ctx.put(\"callback\", async (...args) => callback(...args))\r\n    ctx.sendSelf(MAYBE_PROCESS)\r\n  },\r\n\r\n  [ENQUEUE]: (ctx, letter, args) => {\r\n    const id = uid()\r\n    const hold = {id, args, reply: letter.reply}\r\n    ctx.update(\"need\", n => {\r\n      n.add(id)\r\n      return n\r\n    })\r\n    ctx.update(\"hold\", h => ({...h, [id]: hold}))\r\n    ctx.sendSelf(MAYBE_PROCESS)\r\n  },\r\n\r\n  [TIMEOUT]: ctx => {\r\n    if (ctx.get(\"need\").size) ctx.sendSelf(PROCESS)\r\n  },\r\n\r\n  [MAYBE_PROCESS]: ctx => {\r\n    if (ctx.get(\"need\") >= BUFFER_SIZE) ctx.sendSelf(PROCESS)\r\n  },\r\n\r\n  [PROCESS]: ctx => {\r\n    const callback = ctx.get(\"callback\")\r\n    if (typeof callback !== \"function\") return\r\n\r\n    const need = ctx.get(\"need\")\r\n    ctx.update(\"processing\", p => new Set([...p, ...need]))\r\n    ctx.put(\"need\", new Set())\r\n\r\n    const hold = ctx.get(\"hold\")\r\n    const payload = [...need].reduce(\r\n      (acc, key) => ({...acc, [key]: hold[key].args}),\r\n      {}\r\n    )\r\n\r\n    callback(payload).then(result => {\r\n      ctx.sendSelf(RESOLVE, result)\r\n    })\r\n  },\r\n  [RESOLVE]: (ctx, _, results) => {\r\n    const have = Object.keys(results)\r\n    for (let h of have) {\r\n      const hold = ctx.get(\"hold\")\r\n      hold[h].reply(results[h])\r\n      ctx.update(\"processing\", p => {\r\n        p.delete(h)\r\n        return p\r\n      })\r\n      ctx.update(\"hold\", hold => {\r\n        delete hold[h]\r\n        return hold\r\n      })\r\n    }\r\n  },\r\n}\r\n\r\nexport const batch = (name, callback) => {\r\n  spawn(HANDLERS, name)\r\n  send(name, SET_CALLBACK, callback)\r\n\r\n  return {\r\n    enqueue(...args) {\r\n      return send(name, ENQUEUE, args, {expectReply: true, timeout: 0})\r\n    },\r\n  }\r\n}\r\n","import * as fcl from \"@onflow/fcl\"\r\nimport * as t from \"@onflow/types\"\r\nimport {batch} from \"./util/batch\"\r\n\r\nconst CODE = fcl.cdc`\r\nimport NonFungibleToken from 0xNonFungibleToken\r\nimport KittyItems from 0xKittyItems\r\n\r\npub struct AccountItem {\r\n  pub let itemID: UInt64\r\n  pub let typeID: UInt64\r\n  pub let owner: Address\r\n\r\n  init(itemID: UInt64, typeID: UInt64, owner: Address) {\r\n    self.itemID = itemID\r\n    self.typeID = typeID\r\n    self.owner = owner\r\n  }\r\n}\r\n\r\npub fun fetch(address: Address, id: UInt64): AccountItem? {\r\n  if let col = getAccount(address).getCapability<&KittyItems.Collection{NonFungibleToken.CollectionPublic, KittyItems.KittyItemsCollectionPublic}>(KittyItems.CollectionPublicPath).borrow() {\r\n    if let item = col.borrowKittyItem(id: id) {\r\n      return AccountItem(itemID: id, typeID: item.typeID, owner: address)\r\n    }\r\n  }\r\n\r\n  return nil\r\n}\r\n\r\npub fun main(keys: [String], addresses: [Address], ids: [UInt64]): {String: AccountItem?} {\r\n  let r: {String: AccountItem?} = {}\r\n  var i = 0\r\n  while i < keys.length {\r\n    let key = keys[i]\r\n    let address = addresses[i]\r\n    let id = ids[i]\r\n    r[key] = fetch(address: address, id: id)\r\n    i = i + 1\r\n  }\r\n  return r\r\n}\r\n`\r\n\r\nconst collate = px => {\r\n  return Object.keys(px).reduce(\r\n    (acc, key) => {\r\n      acc.keys.push(key)\r\n      acc.addresses.push(px[key][0])\r\n      acc.ids.push(px[key][1])\r\n      return acc\r\n    },\r\n    {keys: [], addresses: [], ids: []}\r\n  )\r\n}\r\n\r\nconst {enqueue} = batch(\"FETCH_ACCOUNT_ITEM\", async px => {\r\n  const {keys, addresses, ids} = collate(px)\r\n\r\n  return fcl\r\n    .send([\r\n      fcl.script(CODE),\r\n      fcl.args([\r\n        fcl.arg(keys, t.Array(t.String)),\r\n        fcl.arg(addresses, t.Array(t.Address)),\r\n        fcl.arg(ids.map(Number), t.Array(t.UInt64)),\r\n      ]),\r\n    ])\r\n    .then(fcl.decode)\r\n})\r\n\r\nexport async function fetchAccountItem(address, id) {\r\n  if (address == null) return Promise.resolve(null)\r\n  if (id == null) return Promise.resolve(null)\r\n  return enqueue(address, id)\r\n}\r\n","import * as fcl from \"@onflow/fcl\"\r\nimport * as t from \"@onflow/types\"\r\nimport {tx} from \"./util/tx\"\r\n\r\nconst CODE = fcl.cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import FUSD from 0xFUSD\r\n  import KittyItems from 0xKittyItems\r\n  import NFTStorefront from 0xNFTStorefront\r\n\r\n  transaction(saleItemID: UInt64, saleItemPrice: UFix64) {\r\n\r\n    let fusdReceiver: Capability<&FUSD.Vault{FungibleToken.Receiver}>\r\n    let kittyItemsCollection: Capability<&KittyItems.Collection{NonFungibleToken.Provider, NonFungibleToken.CollectionPublic}>\r\n    let storefront: &NFTStorefront.Storefront\r\n\r\n    prepare(account: AuthAccount) {\r\n      // We need a provider capability, but one is not provided by default so we create one if needed.\r\n      let kittyItemsCollectionProviderPrivatePath = /private/kittyItemsCollectionProvider\r\n\r\n      self.fusdReceiver = account.getCapability<&FUSD.Vault{FungibleToken.Receiver}>(/public/fusdReceiver)!\r\n\r\n      assert(self.fusdReceiver.borrow() != nil, message: \"Missing or mis-typed FUSD receiver\")\r\n\r\n      if !account.getCapability<&KittyItems.Collection{NonFungibleToken.Provider, NonFungibleToken.CollectionPublic}>(kittyItemsCollectionProviderPrivatePath)!.check() {\r\n        account.link<&KittyItems.Collection{NonFungibleToken.Provider, NonFungibleToken.CollectionPublic}>(kittyItemsCollectionProviderPrivatePath, target: KittyItems.CollectionStoragePath)\r\n      }\r\n\r\n      self.kittyItemsCollection = account.getCapability<&KittyItems.Collection{NonFungibleToken.Provider, NonFungibleToken.CollectionPublic}>(kittyItemsCollectionProviderPrivatePath)!\r\n      assert(self.kittyItemsCollection.borrow() != nil, message: \"Missing or mis-typed KittyItemsCollection provider\")\r\n      \r\n      self.storefront = account.borrow<&NFTStorefront.Storefront>(from: NFTStorefront.StorefrontStoragePath)\r\n        ?? panic(\"Missing or mis-typed NFTStorefront Storefront\")\r\n    }\r\n\r\n    execute {\r\n      let saleCut = NFTStorefront.SaleCut(\r\n        receiver: self.fusdReceiver,\r\n        amount: saleItemPrice\r\n      )\r\n\r\n      self.storefront.createSaleOffer(\r\n        nftProviderCapability: self.kittyItemsCollection,\r\n        nftType: Type<@KittyItems.NFT>(),\r\n        nftID: saleItemID,\r\n        salePaymentVaultType: Type<@FUSD.Vault>(),\r\n        saleCuts: [saleCut]\r\n      )\r\n    }\r\n  }\r\n\r\n`\r\n\r\nexport function createSaleOffer({itemID, price}, opts = {}) {\r\n  if (itemID == null)\r\n    throw new Error(\"createSaleOffer(itemID, price) -- itemID required\")\r\n  if (price == null)\r\n    throw new Error(\"createSaleOffer(itemID, price) -- price required\")\r\n\r\n  // prettier-ignore\r\n  return tx([\r\n    fcl.transaction(CODE),\r\n    fcl.args([\r\n      fcl.arg(Number(itemID), t.UInt64),\r\n      fcl.arg(String(price), t.UFix64),\r\n    ]),\r\n    fcl.proposer(fcl.authz),\r\n    fcl.payer(fcl.authz),\r\n    fcl.authorizations([\r\n      fcl.authz\r\n    ]),\r\n    fcl.limit(1000)\r\n  ], opts)\r\n}\r\n","import {sansPrefix} from \"@onflow/fcl\"\r\nimport {atomFamily, selectorFamily, useRecoilState} from \"recoil\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {fetchAccountItem} from \"../flow/script.get-account-item\"\r\nimport {createSaleOffer} from \"../flow/tx.create-sale-offer\"\r\nimport {IDLE, PROCESSING} from \"../global/constants\"\r\nimport {useAccountItems} from \"../hooks/use-account-items.hook\"\r\nimport {useMarketItems} from \"../hooks/use-market-items.hook\"\r\n\r\nfunction expand(key) {\r\n  return key.split(\"|\")\r\n}\r\n\r\nfunction comp(address, id) {\r\n  return [address, id].join(\"|\")\r\n}\r\n\r\nexport const $state = atomFamily({\r\n  key: \"account-item::state\",\r\n  default: selectorFamily({\r\n    key: \"account-item::default\",\r\n    get: key => async () => fetchAccountItem(...expand(key)),\r\n  }),\r\n})\r\n\r\nexport const $status = atomFamily({\r\n  key: \"account-item::status\",\r\n  default: IDLE,\r\n})\r\n\r\nexport function useAccountItem(address, id) {\r\n  const [cu] = useCurrentUser()\r\n  const accountItems = useAccountItems(address)\r\n  const marketItems = useMarketItems()\r\n  const key = comp(address, id)\r\n  const [item, setItem] = useRecoilState($state(key))\r\n  const [status, setStatus] = useRecoilState($status(key))\r\n\r\n  return {\r\n    ...item,\r\n    status,\r\n    forSale: marketItems.has(item),\r\n    saleOfferResourceID: marketItems.findSaleOffer(item.itemID),\r\n    owned: sansPrefix(cu.addr) === sansPrefix(address),\r\n    async sell(price) {\r\n      await createSaleOffer(\r\n        {itemID: id, price: price},\r\n        {\r\n          onStart() {\r\n            setStatus(PROCESSING)\r\n          },\r\n          async onSuccess() {\r\n            accountItems.refresh()\r\n          },\r\n          async onComplete() {\r\n            setStatus(IDLE)\r\n          },\r\n          async onError(error) {\r\n            // TODO: Handle error\r\n          },\r\n        }\r\n      )\r\n    },\r\n    async refresh() {\r\n      setStatus(PROCESSING)\r\n      await fetchAccountItem(...expand(key)).then(setItem)\r\n      setStatus(IDLE)\r\n    },\r\n  }\r\n}\r\n","import React, {useEffect, useState, Suspense} from \"react\"\r\nimport {useAccountItem} from \"../hooks/use-account-item.hook\"\r\nimport {useMarketItem} from \"../hooks/use-market-item.hook\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {IDLE} from \"../global/constants\"\r\nimport {\r\n  Tr,\r\n  Td,\r\n  Button,\r\n  Spinner,\r\n  Flex,\r\n  Center,\r\n  Text,\r\n  Image,\r\n  HStack,\r\n} from \"@chakra-ui/react\"\r\n\r\nexport const ItemImage = ({typeID}) => {\r\n  // Lazy load SVG images for the kitty items.\r\n  let [item, setItemImage] = useState(\"\")\r\n\r\n  useEffect(() => {\r\n    async function getImage() {\r\n      let importedIcon = await import(`../svg/Items/item0${typeID}.svg`)\r\n      setItemImage(importedIcon.default)\r\n    }\r\n    if (typeID) getImage()\r\n  }, [typeID])\r\n\r\n  return <Image maxW=\"64px\" src={item} />\r\n}\r\n\r\nexport function AccountItemCluster({address, id}) {\r\n  const item = useAccountItem(address, id)\r\n  const listing = useMarketItem(address, id)\r\n  const [cu] = useCurrentUser()\r\n\r\n  const BUSY = item.status !== IDLE || listing.status !== IDLE\r\n\r\n  if (address == null) return null\r\n  if (id == null) return null\r\n\r\n  return (\r\n    <Tr>\r\n      <Td maxW=\"50px\">\r\n        <Flex>\r\n          <Text as={item.forSale && \"del\"}>#{item.itemID}</Text>\r\n        </Flex>\r\n      </Td>\r\n      <Td>({item.typeID})</Td>\r\n      <Td>\r\n        <ItemImage typeID={item.typeID} />\r\n      </Td>\r\n      {cu.addr === address && (\r\n        <>\r\n          {!item.forSale ? (\r\n            <Td isNumeric>\r\n              <Button\r\n                colorScheme=\"blue\"\r\n                size=\"sm\"\r\n                disabled={BUSY}\r\n                onClick={() => item.sell(\"10.0\")}\r\n              >\r\n                <HStack>\r\n                  {BUSY && <Spinner mr=\"2\" size=\"xs\" />}{\" \"}\r\n                  <Text>List for 10 FUSD</Text>\r\n                </HStack>\r\n              </Button>\r\n            </Td>\r\n          ) : (\r\n            <Td isNumeric>\r\n              <Button\r\n                size=\"sm\"\r\n                colorScheme=\"orange\"\r\n                disabled={BUSY}\r\n                onClick={listing.cancelListing}\r\n              >\r\n                <HStack>\r\n                  {BUSY && <Spinner mr=\"2\" size=\"xs\" />} <Text>Unlist</Text>\r\n                </HStack>\r\n              </Button>\r\n            </Td>\r\n          )}\r\n        </>\r\n      )}\r\n    </Tr>\r\n  )\r\n}\r\n\r\nexport default function WrappedAccountItemCluster(props) {\r\n  return (\r\n    <Suspense\r\n      fallback={\r\n        <Tr>\r\n          <Td>\r\n            <Flex>\r\n              <Text>#{props.id}</Text>\r\n              <Center ml=\"4\">\r\n                <Spinner size=\"xs\" />\r\n              </Center>\r\n            </Flex>\r\n          </Td>\r\n          <Td />\r\n          <Td />\r\n          <Td />\r\n        </Tr>\r\n      }\r\n    >\r\n      <AccountItemCluster {...props} />\r\n    </Suspense>\r\n  )\r\n}\r\n","import {Suspense} from \"react\"\r\nimport {useMarketItem} from \"../hooks/use-market-item.hook\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {IDLE} from \"../global/constants\"\r\nimport {\r\n  Tr,\r\n  Td,\r\n  Button,\r\n  Spinner,\r\n  Flex,\r\n  Center,\r\n  Text,\r\n  HStack,\r\n} from \"@chakra-ui/react\"\r\n\r\nimport {ItemImage} from \"./account-item-cluster.comp\"\r\n\r\nexport function MarketItemCluster({address, id}) {\r\n  const [cu, loggedIn] = useCurrentUser()\r\n  const item = useMarketItem(address, id)\r\n\r\n  const BUSY = item.status !== IDLE || item.status !== IDLE\r\n\r\n  return (\r\n    <Tr>\r\n      <Td maxW=\"50px\">\r\n        <Flex>\r\n          <Text>#{item.itemID}</Text>\r\n        </Flex>\r\n      </Td>\r\n      <Td>({item.typeID})</Td>\r\n      <Td>\r\n        <ItemImage typeID={item.typeID} />\r\n      </Td>\r\n      <Td>{item.price}</Td>\r\n      {loggedIn && (\r\n        <>\r\n          {item.owner === cu.addr ? (\r\n            <Td isNumeric>\r\n              <Button\r\n                colorScheme=\"orange\"\r\n                size=\"sm\"\r\n                disabled={BUSY}\r\n                onClick={item.cancelListing}\r\n              >\r\n                <HStack>\r\n                  {BUSY && <Spinner mr=\"2\" size=\"xs\" />}\r\n                  <Text>Unlist</Text>\r\n                </HStack>\r\n              </Button>\r\n            </Td>\r\n          ) : (\r\n            <Td isNumeric>\r\n              <Button\r\n                colorScheme=\"blue\"\r\n                size=\"sm\"\r\n                disabled={BUSY}\r\n                onClick={item.buy}\r\n              >\r\n                <HStack>\r\n                  {BUSY && <Spinner mr=\"2\" size=\"xs\" />}\r\n                  <Text>Buy</Text>\r\n                </HStack>\r\n              </Button>\r\n            </Td>\r\n          )}\r\n        </>\r\n      )}\r\n    </Tr>\r\n  )\r\n}\r\n\r\nexport default function WrappedMarketItemCluster(props) {\r\n  return (\r\n    <Suspense\r\n      fallback={\r\n        <Tr>\r\n          <Td maxW=\"50px\">\r\n            <Flex>\r\n              <Text>#{props.id}</Text>\r\n              <Center ml=\"4\">\r\n                <Spinner size=\"xs\" />\r\n              </Center>\r\n            </Flex>\r\n          </Td>\r\n          <Td />\r\n          <Td />\r\n        </Tr>\r\n      }\r\n    >\r\n      <MarketItemCluster {...props} />\r\n    </Suspense>\r\n  )\r\n}\r\n","import {Suspense} from \"react\"\r\nimport {useMarketItems} from \"../hooks/use-market-items.hook\"\r\nimport Item from \"./market-item-cluster.comp\"\r\nimport {Box, Table, Thead, Tbody, Tr, Th, Text, Spinner} from \"@chakra-ui/react\"\r\n\r\nexport function MarketItemsCluster() {\r\n  const {items, status} = useMarketItems()\r\n\r\n  if (items.length <= 0)\r\n    return (\r\n      <Box borderWidth=\"1px\" borderRadius=\"lg\" p=\"4\">\r\n        <Text>No Items Listed For Sale</Text>\r\n      </Box>\r\n    )\r\n\r\n  return (\r\n    <Box borderWidth=\"1px\" borderRadius=\"lg\">\r\n      <Table size=\"sm\">\r\n        <Thead>\r\n          <Tr>\r\n            <Th>Id</Th>\r\n            <Th>Type</Th>\r\n            <Th>Image</Th>\r\n            <Th>Price</Th>\r\n          </Tr>\r\n        </Thead>\r\n        <Tbody>\r\n          {items.map(item => (\r\n            <Item\r\n              key={item.resourceID}\r\n              id={item.resourceID}\r\n              address={item.owner}\r\n              status={status}\r\n            />\r\n          ))}\r\n        </Tbody>\r\n      </Table>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default function WrappedMarketItemsCluster() {\r\n  return (\r\n    <Suspense\r\n      fallback={\r\n        <Box borderWidth=\"1px\" borderRadius=\"lg\" p=\"4\">\r\n          <Spinner />\r\n        </Box>\r\n      }\r\n    >\r\n      <MarketItemsCluster />\r\n    </Suspense>\r\n  )\r\n}\r\n","import {Suspense} from \"react\"\r\nimport {useAccountItems} from \"../hooks/use-account-items.hook\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport Item from \"./account-item-cluster.comp\"\r\nimport {Box, Table, Thead, Tbody, Tr, Th, Text, Spinner} from \"@chakra-ui/react\"\r\n\r\nexport function AccountItemsCluster({address}) {\r\n  const items = useAccountItems(address)\r\n  const [cu] = useCurrentUser()\r\n\r\n  if (address == null) return null\r\n\r\n  if (items.ids.length <= 0)\r\n    return (\r\n      <Box borderWidth=\"1px\" borderRadius=\"lg\" p=\"4\">\r\n        <Text>No Items</Text>\r\n      </Box>\r\n    )\r\n\r\n  return (\r\n    <Box borderWidth=\"1px\" borderRadius=\"lg\">\r\n      <Table size=\"sm\">\r\n        <Thead>\r\n          <Tr>\r\n            <Th>Id</Th>\r\n            <Th>Type</Th>\r\n            <Th>Image</Th>\r\n            {cu.addr === address && <Th />}\r\n          </Tr>\r\n        </Thead>\r\n        <Tbody>\r\n          {items.ids.map(id => (\r\n            <Item key={id} id={id} address={address} />\r\n          ))}\r\n        </Tbody>\r\n      </Table>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default function WrappedAccountItemsCluster({address}) {\r\n  return (\r\n    <Suspense\r\n      fallback={\r\n        <Box borderWidth=\"1px\" borderRadius=\"lg\" p=\"4\">\r\n          <Spinner />\r\n        </Box>\r\n      }\r\n    >\r\n      <AccountItemsCluster address={address} />\r\n    </Suspense>\r\n  )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/cookie.293806d6.svg\";","export default __webpack_public_path__ + \"static/media/backpack.d9a42e9e.svg\";","import {Suspense} from \"react\"\r\nimport {Base} from \"../../parts/base.comp\"\r\nimport {IDLE} from \"../../global/constants\"\r\nimport {useAddress} from \"../../hooks/use-url-address.hook\"\r\nimport {useCurrentUser} from \"../../hooks/use-current-user.hook\"\r\nimport {useMarketItems} from \"../../hooks/use-market-items.hook\"\r\nimport {useAccountItems} from \"../../hooks/use-account-items.hook\"\r\nimport {useInitialized} from \"../../hooks/use-initialized.hook\"\r\nimport {useFUSDBalance} from \"../../hooks/use-fusd-balance.hook\"\r\nimport AuthCluster from \"../../parts/auth-cluster.comp\"\r\nimport InitCluster from \"../../parts/init-cluster.comp\"\r\nimport BalanceCluster from \"../../parts/balance-cluster.comp\"\r\nimport MarketItemsCluster from \"../../parts/market-items-cluster.comp\"\r\nimport AccountItemsCluster from \"../../parts/account-items-cluster.comp\"\r\nimport {\r\n  Alert,\r\n  AlertIcon,\r\n  AlertTitle,\r\n  Box,\r\n  Badge,\r\n  Flex,\r\n  Center,\r\n  Tag,\r\n  Text,\r\n  Tabs,\r\n  TabList,\r\n  Tab,\r\n  TabPanels,\r\n  TabPanel,\r\n  Spinner,\r\n  Button,\r\n  HStack,\r\n  Image,\r\n} from \"@chakra-ui/react\"\r\n\r\nimport Cookie from \"../../svg/cookie.svg\"\r\nimport BackPack from \"../../svg/backpack.svg\"\r\n\r\nexport function MarketItemsCount() {\r\n  let l = 0\r\n  return l > 0 ? <Tag ml=\"1\">{l}</Tag> : null\r\n}\r\n\r\nexport function AccountItemsCount({address}) {\r\n  const items = useAccountItems(address)\r\n  if (items.status !== IDLE) return <Spinner size=\"xs\" ml=\"1\" />\r\n  const l = items?.ids?.length ?? 0\r\n  return l > 0 ? <Tag ml=\"1\">{l}</Tag> : null\r\n}\r\n\r\nexport function StoreItemsCount() {\r\n  const items = useMarketItems()\r\n  if (items.status !== IDLE) return <Spinner size=\"xs\" ml=\"1\" />\r\n  const l = items?.ids?.length ?? 0\r\n  return l > 0 ? <Tag ml=\"1\">{l}</Tag> : null\r\n}\r\n\r\nexport function MintButton({address}) {\r\n  const items = useAccountItems(address)\r\n\r\n  return (\r\n    <Button disabled={items.status !== IDLE} onClick={items.mint}>\r\n      Mint Item\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport function InfoBanner({address}) {\r\n  const init = useInitialized(address)\r\n  const fusd = useFUSDBalance(address)\r\n  const [cu] = useCurrentUser()\r\n\r\n  const status = {\r\n    notInitialized: {\r\n      type: \"info\",\r\n      title: \"Initialize Your Account\",\r\n      text: \"You need to initialize your account before you can receive FUSD.\",\r\n    },\r\n    noFUSD: {\r\n      type: \"info\",\r\n      title: \"Get FUSD\",\r\n      text: \"You need FUSD to buy Kitty Items.\",\r\n    },\r\n  }\r\n\r\n  function Banner(message) {\r\n    return (\r\n      <Flex my=\"4\">\r\n        <Alert status={message.type}>\r\n          <AlertIcon />\r\n          <AlertTitle mr={2}>{message.title}</AlertTitle>\r\n          {message.text}\r\n        </Alert>\r\n      </Flex>\r\n    )\r\n  }\r\n\r\n  switch (true) {\r\n    case !init.isInitialized && cu.addr === address:\r\n      return Banner(status.notInitialized)\r\n    case fusd.balance < 0 && cu.addr === address:\r\n      return Banner(status.noFUSD)\r\n    default:\r\n      return null\r\n  }\r\n}\r\n\r\nexport function Page() {\r\n  const address = useAddress()\r\n  const [cu] = useCurrentUser()\r\n  if (address == null) return <div>Not Found</div>\r\n\r\n  return (\r\n    <Base>\r\n      <Box p=\"4\">\r\n        <AuthCluster />\r\n        <Flex mb=\"4\">\r\n          <Center>\r\n            <Text mr=\"4\" fontSize=\"2xl\" color=\"purple.500\">\r\n              Account:{\" \"}\r\n              <Text display=\"inline\" color=\"black\" fontWeight=\"bold\">\r\n                {address}\r\n              </Text>\r\n            </Text>\r\n          </Center>\r\n          {address === cu.addr && (\r\n            <Center>\r\n              <Badge ml=\"4\" variant=\"outline\" colorScheme=\"orange\">\r\n                You\r\n              </Badge>\r\n            </Center>\r\n          )}\r\n        </Flex>\r\n        <Suspense fallback={null}>\r\n          <InfoBanner address={address} />\r\n        </Suspense>\r\n        <Flex>\r\n          <Box>\r\n            <InitCluster address={address} />\r\n          </Box>\r\n          <Box ml=\"4\">\r\n            <BalanceCluster address={address} />\r\n          </Box>\r\n          {cu.addr === address && (\r\n            <Box ml=\"4\">\r\n              <Suspense fallback={null}>\r\n                <MintButton address={address} />\r\n              </Suspense>\r\n            </Box>\r\n          )}\r\n        </Flex>\r\n        <Tabs colorScheme=\"pink\" defaultIndex={0}>\r\n          <TabList>\r\n            <Tab fontSize=\"2xl\">\r\n              <HStack>\r\n                <Image src={BackPack} />\r\n                <Box>{cu.addr === address ? \"My\" : \"User\"} Items</Box>\r\n              </HStack>\r\n              <Suspense fallback={null}>\r\n                <AccountItemsCount address={address} />\r\n              </Suspense>\r\n            </Tab>\r\n            <Tab fontSize=\"2xl\">\r\n              <HStack>\r\n                <Image src={Cookie} />\r\n                <Box>Items Marketplace</Box>\r\n              </HStack>\r\n              <Suspense fallback={null}>\r\n                <MarketItemsCount />\r\n              </Suspense>\r\n            </Tab>\r\n          </TabList>\r\n\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <AccountItemsCluster address={address} />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <MarketItemsCluster />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Base>\r\n  )\r\n}\r\n","import {config} from \"@onflow/fcl\"\r\n\r\nconfig()\r\n  .put(\"app.detail.title\", \"Kitty Items\")\r\n  .put(\"env\", process.env.REACT_APP_CHAIN_ENV)\r\n  .put(\"faucet\", process.env.REACT_APP_FAUCET_ADDRESS)\r\n  .put(\"accessNode.api\", process.env.REACT_APP_FLOW_ACCESS_API_URL)\r\n  .put(\"challenge.handshake\", process.env.REACT_APP_WALLET_DISCOVERY)\r\n  .put(\"0xFungibleToken\", process.env.REACT_APP_CONTRACT_FUNGIBLE_TOKEN)\r\n  .put(\"0xNonFungibleToken\", process.env.REACT_APP_CONTRACT_NON_FUNGIBLE_TOKEN)\r\n  .put(\"0xFUSD\", process.env.REACT_APP_CONTRACT_FUSD)\r\n  .put(\"0xNFTStorefront\", process.env.REACT_APP_CONTRACT_NFT_STOREFRONT)\r\n  .put(\"0xKittyItems\", process.env.REACT_APP_CONTRACT_KITTY_ITEMS)\r\n  .put(\"decoder.Type\", val => val.staticType)\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport reportWebVitals from \"./reportWebVitals\"\r\nimport {Switch, Route} from \"react-router-dom\"\r\n\r\nimport {Providers} from \"./global/providers.comp\"\r\n\r\nimport {Page as Root} from \"./pages/root.page\"\r\nimport {Page as Account} from \"./pages/account\"\r\nimport {Page as NotFound} from \"./pages/not-found.page\"\r\n\r\nimport * as fcl from \"@onflow/fcl\"\r\nimport * as t from \"@onflow/types\"\r\n\r\nimport \"./global/config\"\r\nimport \"./font.css\"\r\n\r\nwindow.fcl = fcl\r\nwindow.t = t\r\n\r\nReactDOM.render(\r\n  <Providers>\r\n    <Switch>\r\n      <Route exact path=\"/0x:address\" component={Account} />\r\n      <Route exact path=\"/\" component={Root} />\r\n      <Route component={NotFound} />\r\n    </Switch>\r\n  </Providers>,\r\n  document.getElementById(\"root\")\r\n)\r\n\r\nreportWebVitals()\r\n","import {withPrefix} from \"@onflow/fcl\"\r\nimport {useParams} from \"react-router-dom\"\r\n\r\nexport function useAddress() {\r\n  const {address} = useParams()\r\n  return withPrefix(address)\r\n}\r\n","import {Base} from \"../parts/base.comp\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {Redirect} from \"react-router-dom\"\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  Center,\r\n  Heading,\r\n  Spacer,\r\n  HStack,\r\n  Image,\r\n} from \"@chakra-ui/react\"\r\n\r\nimport Logo from \"../svg/logo-kv.svg\"\r\n\r\nexport function Page() {\r\n  const [user, loggedIn, {signUp, logIn}] = useCurrentUser()\r\n\r\n  if (loggedIn) return <Redirect to={\"/\" + user.addr} />\r\n\r\n  return (\r\n    <Base>\r\n      <Box p=\"4\">\r\n        <Flex>\r\n          <Center mr=\"4\">\r\n            <HStack>\r\n              <Image src={Logo} />\r\n              <Heading size=\"lg\">Kitty Items</Heading>\r\n            </HStack>\r\n          </Center>\r\n          <Spacer />\r\n          <Button mr=\"4\" colorScheme=\"blue\" onClick={logIn}>\r\n            Log In\r\n          </Button>\r\n          <Button mr=\"4\" colorScheme=\"blue\" onClick={signUp}>\r\n            Sign Up\r\n          </Button>\r\n        </Flex>\r\n      </Box>\r\n    </Base>\r\n  )\r\n}\r\n","import {Base} from \"../parts/base.comp\"\r\n\r\nexport function Page() {\r\n  return <Base>Page: Not Found</Base>\r\n}\r\n"],"sourceRoot":""}